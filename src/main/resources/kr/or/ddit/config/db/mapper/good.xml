<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="good">
	
	<!-- 좋아요 정보 등록 -->	
	<insert id="insert_goodInfo" parameterType="goodVo">
		insert into good
		values(
			good_code_seq.nextval,
			#{mem_id},
			#{ref_code},
			#{division},
			sysdate
		)
		
		<selectKey resultType="String" keyProperty="good_code" order="AFTER">
			select good_code_seq.currval
			  from dual
		</selectKey>
	</insert>
	
	
	
	<!-- 좋아요 정보 삭제 -->
	<delete id="delete_goodInfo" parameterType="goodVo">
		delete good
		 where ref_code = #{ref_code}
		   and division = #{division}
		   and mem_id = #{mem_id}
	</delete>
	
	<!-- 회원의 좋아요 정보 조회 -->
	<select id="select_goodInfo" parameterType="String" resultType="goodVo">
		select good_code, mem_id, ref_code, division, good_date
		  from good
		 where mem_id = #{mem_id}
		order by good_date desc
	</select>
	
	<!-- 게시글 좋아요 갯수 조회 -->
	<select id="select_goodCount" parameterType="goodVo" resultType="int">
		select count(*)
		  from good
		 where ref_code = #{ref_code}
		   and division = #{division}
	</select>
	
	<!-- 좋아요 한 회원 조회 -->
	<select id="select_pushGoodMember" parameterType="goodVo" resultType="usersVo">
		select distinct b.*
		  from good a,  (select user_id, user_name, profile_img, profile_path,
		                        substr(listagg(beintroduce, ' ') within group (order by graduation desc), 0, instr(listagg(beintroduce, ' ') within group (order by graduation desc), ' ', 1, 2)) as introduce
		                               
		                   from (select a.user_id, c.user_name, c.profile_img, c.profile_path,
		                                case when b.resign_date is null then b.corporate_name ||' ' ||job_position || ' '
		                                     when b.resign_date is not null then a.school_name ||' ' || a.degree_name || ' '
		                                end as beintroduce, a.graduation
		                           from education_info a, career_info b, users c
		                          where a.user_id = b.user_id
		                            and c.user_id = b.user_id
		                            and (b.user_id,nvl(b.resign_date,to_date('3000/01/01','yyyy/mm/dd'))) in ( select career_info.user_id,  max(nvl(career_info.resign_date,to_date('3000/01/01','yyyy/mm/dd')))
		                                                                                                         from career_info, education_info
		                                                                                                        where career_info.user_id = education_info.user_id
		                                                                                                       group by career_info.user_id)
		                         order by a.graduation desc)
		                 group by user_id, user_name, profile_img, profile_path) b
		 where a.mem_id = b.user_id(+)
		   and a.division = #{division}
		   and a.ref_code = #{ref_code}
		order by b.user_name
	</select>

	<!-- 회원이 좋아요 한 글 번호 목록 조회 -->
	<select id="select_pushedGoodPost" parameterType="String" resultType="goodVo">
		select mem_id, ref_code
		  from good
		 where division = 28
		   and ref_code in (select post_code
		                      from post)
		   and mem_id = #{mem_id}
	</select>
	
	<!-- 좋아요 코드 찾기 -->
	<select id="search_goodcode" parameterType="goodVo" resultType="java.lang.String">
	select good_code
	  from good
	 where mem_id = #{mem_id}
	   and ref_code = #{ref_code}
	   and division = #{division}
	</select>
	
	<!-- 좋아요 리스트 조회 - 정거니 -->
	<select id="select_goodList" parameterType="goodVo" resultType="goodVo">
	select *
	  from good
	 where mem_id = #{mem_id}
	   and division = #{division}
	</select>
	
	<!-- 좋아요 취소 - 정거니 -->
	<delete id="delete_good" parameterType="String">
		delete good
		 where good_code = #{ good_code }
	</delete>
	
	
</mapper>